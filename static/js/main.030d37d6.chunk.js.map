{"version":3,"sources":["GlobalComponents/Notification/index.js","GlobalComponents/Notification/NotificationContext.js","Hooks/UseSortingAlgorithmQuery.js","Context/SortingAlgorithmContext.js","GlobalComponents/BigButton/index.js","Utils/AnimateModal.js","GlobalComponents/Spinner/index.js","Components/BigButtonPanel/index.js","GlobalComponents/RadioButton/index.js","Components/ListProperties/RadioButtons.js","GlobalComponents/RangeSlider/index.js","Components/ListProperties/SizeSlider.js","GlobalComponents/PrimaryModal/index.js","Components/ListProperties/ListModal.js","GlobalComponents/PrimaryButton/index.js","Components/ListProperties/ListButtons.js","Components/ListProperties/index.js","Components/ExperimentalResults/Result.js","Components/ExperimentalResults/index.js","Components/MainPanel/Ranking.js","Components/MainPanel/LeaderBoard.js","Components/MainPanel/index.js","App.js","serviceWorker.js","index.js"],"names":["Notification","NotificationOptions","onClose","Notif","React","useRef","useState","SlideOut","setSlideOut","useEffect","current","CurrentNotif","style","height","scrollHeight","timeout","setProperty","onanimationend","e","animationName","id","clearTimeout","ref","className","onClick","type","toUpperCase","title","body","NotificationList","Notifications","map","notification","n","key","NotificationContext","createContext","NotifIndex","NotificationProvider","children","setNotifications","PushNotification","useCallback","NewNotif","OldNotifs","RemoveNotification","length","filter","notif","Provider","value","UseNotificationContext","useContext","GET_ALGORITHMS","gql","GET_DATA_TYPES","UseSortingAlgorithmQuery","setDataTypes","setAlgorithms","setDataLoaded","useLazyQuery","LoadAlgorithms","AlgorithmQueryData","data","AlgorithmQueryError","error","LoadDataTypes","DataTypesQueryData","DataTypesQueryError","GetAlgorithms","GetDataTypes","SortingAlgorithmDataContext","SortingAlgorithmFunctionContext","SortingAlgorithmProvider","DataTypes","Algorithms","Size","setSize","SelectedDataType","setSelectedDataType","ListInfo","setListInfo","AlgorithmStatisics","setAlgorithmStatisics","DataLoaded","UseSortingAlgorithmDataContext","UseSortingAlgorithmFunctionContext","BigButton","AnimateModal","el","cb","classList","add","Spinner","Loading","CloseCallback","Overlay","width","viewBox","fill","gradientTransform","offset","cx","cy","r","strokeWidth","stroke","SORT_LIST","BigButtonPanel","CurrentAlgorithm","setLoading","ShowSpinner","setShowSpinner","useMutation","errorPolicy","onError","SortList","dataType","replace","algorithm","displayName","setTimeout","message","split","Algorithm","a","variables","size","RunSort","RadioButton","name","label","description","defaultChecked","onChange","TimeoutRef","ShowToolTip","setShowToolTip","onMouseOver","onMouseLeave","OldShowValue","animation","RadioButtons","DataType","d","RangeSlider","min","max","step","border","borderRight","borderLeftColor","borderRightColor","left","SizeSlider","setContextSize","parseInt","target","PrimaryModal","props","Modal","CloseModal","persist","PassCloseEvent","ModalOptions","HeaderTitle","ListModal","setShowListModal","list","sortedList","PrimaryButton","UPDATE_LIST","GET_LIST","ListButtons","CurrentListInfo","setCurrentListInfo","RunUpdate","UpdateList","onCompleted","UpdateListMutationData","fetchPolicy","ListInfoQueryData","GetList","LoadListInfo","ListProperties","ShowListModal","margin","Result","Titles","ExperimentalResults","Title","t","Ranking","selectedStat","selectedStatValue","winner","rank","opacity","Stats","GET_LEADER_BOARD_STATS","RESET_LEADER_BOARD","LeaderBoard","setShowLeaderBoard","Rankings","setRankings","setDataType","toLowerCase","SelectedStat","setSelectedStat","LeaderBoardStatQueryData","GetLeaderBoardStats","reduce","c","LoadLeaderBoardStats","ResetLeaderBoard","ctrlKey","Data","Stat","s","Rank","MainPanel","ShowLeaderBoard","App","Boolean","window","location","hostname","match","URI","protocol","indexOf","Client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.030d37d6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Notification.scss\";\r\n\r\nfunction Notification({NotificationOptions, onClose}) {\r\n    const Notif = React.useRef(null);\r\n    const [SlideOut, setSlideOut] = React.useState(false);\r\n    \r\n    React.useEffect(() => {\r\n        if(!Notif.current) return;\r\n        const CurrentNotif = Notif.current;\r\n\r\n        CurrentNotif.style.height = `${CurrentNotif.scrollHeight}px`;\r\n        \r\n        NotificationOptions.timeout && \r\n            CurrentNotif.style.setProperty(\"--Notif-Progress-Animation\", \r\n                `Notif-Progress ${NotificationOptions.timeout/1000}s`);\r\n\r\n        CurrentNotif.onanimationend = (e) => {\r\n            if(e.animationName === \"Notif-ScaleOut\") onClose(NotificationOptions.id);\r\n            else if(e.animationName === \"Notif-Progress\") setSlideOut(true);\r\n        };\r\n\r\n        return () => {\r\n            clearTimeout(CurrentNotif);\r\n            CurrentNotif.onanimationend = null;\r\n        }\r\n    }, [Notif, NotificationOptions, onClose, setSlideOut]);\r\n\r\n    return (\r\n        <div ref={Notif} className={`NotificationWrapper ${SlideOut ? \"NotificationSlideOut\" : \"\"}`}>\r\n            <div className=\"Notification\" onClick={() => setSlideOut(true)}>\r\n                <b>{NotificationOptions.type?.toUpperCase() || \"ERROR\"}</b> | {NotificationOptions.title}\r\n                {NotificationOptions.body && <p>{NotificationOptions.body}</p>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction NotificationList({Notifications, onClose}) {\r\n    return (\r\n        <div className=\"NotificationList\">\r\n            {Notifications.map((notification, n) => \r\n                <Notification key={notification.id} NotificationOptions={notification} onClose={onClose}/>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotificationList;\r\n","import React from \"react\";\r\n\r\nimport NotificationList from \".\";\r\n\r\nconst NotificationContext = React.createContext(); \r\n\r\nlet NotifIndex = 0;\r\n\r\nexport function NotificationProvider({children}) {\r\n    const [Notifications, setNotifications] = React.useState([]);\r\n\r\n    const PushNotification = React.useCallback((NewNotif) => {\r\n        NewNotif.id = NotifIndex++;\r\n        setNotifications((OldNotifs) => [...OldNotifs, NewNotif])\r\n    }, [setNotifications]);\r\n\r\n    const RemoveNotification = React.useCallback((id) =>\r\n        setNotifications((OldNotifs) => {\r\n            OldNotifs.length <= 1 && (NotifIndex = 0);\r\n            return OldNotifs.filter((notif) => notif.id !== id);\r\n        }\r\n    ), [setNotifications]);    \r\n\r\n    return (\r\n        <NotificationContext.Provider value={PushNotification}>\r\n            {children}\r\n            {Notifications.length > 0 && <NotificationList Notifications={Notifications} onClose={RemoveNotification}/>}\r\n        </NotificationContext.Provider>\r\n    );\r\n}\r\n\r\nexport const UseNotificationContext = () => React.useContext(NotificationContext);","import React from \"react\";\r\nimport {gql, useLazyQuery} from \"@apollo/client\";\r\n\r\nconst GET_ALGORITHMS = gql`\r\n    query GetAlgorithms {GetAlgorithms {title displayName}}\r\n`;\r\nconst GET_DATA_TYPES = gql`\r\n    query GetDataTypes {GetDataTypes {title displayName description}}\r\n`;\r\n\r\nfunction UseSortingAlgorithmQuery({setDataTypes, setAlgorithms, setDataLoaded}) {\r\n    const [LoadAlgorithms, {\r\n        data: AlgorithmQueryData, error: AlgorithmQueryError\r\n    }] = useLazyQuery(GET_ALGORITHMS);\r\n\r\n    const [LoadDataTypes, {\r\n        data: DataTypesQueryData, error: DataTypesQueryError\r\n    }] = useLazyQuery(GET_DATA_TYPES);\r\n\r\n    React.useEffect(() => {\r\n        LoadAlgorithms();\r\n        LoadDataTypes();\r\n    }, [LoadAlgorithms, LoadDataTypes]);\r\n    \r\n    React.useEffect(() => {\r\n        if(!AlgorithmQueryData || !DataTypesQueryData) return;\r\n\r\n        setAlgorithms(AlgorithmQueryData.GetAlgorithms);\r\n        setDataTypes(DataTypesQueryData.GetDataTypes);\r\n        setDataLoaded(true);\r\n    }, [AlgorithmQueryData, DataTypesQueryData, setAlgorithms, setDataTypes, setDataLoaded]);\r\n    \r\n    React.useEffect(() => {\r\n        if(AlgorithmQueryError || DataTypesQueryError)\r\n            setDataLoaded(false);\r\n    }, [AlgorithmQueryError, DataTypesQueryError, setDataLoaded]);\r\n}\r\n\r\nexport default UseSortingAlgorithmQuery;\r\n","import React from \"react\";\r\nimport UseSortingAlgorithmQuery from \"../Hooks/UseSortingAlgorithmQuery\";\r\n\r\nconst SortingAlgorithmDataContext = React.createContext(); \r\nconst SortingAlgorithmFunctionContext = React.createContext(); \r\n\r\nexport function SortingAlgorithmProvider({children}) {\r\n    const [DataTypes, setDataTypes] = React.useState(null); \r\n    const [Algorithms, setAlgorithms] = React.useState(null); \r\n    const [Size, setSize] = React.useState(1000);\r\n    const [SelectedDataType, setSelectedDataType] = React.useState(null);\r\n    const [ListInfo, setListInfo] = React.useState({}); \r\n    const [AlgorithmStatisics, setAlgorithmStatisics] = React.useState({}); \r\n    const [DataLoaded, setDataLoaded] = React.useState(null);\r\n\r\n    React.useEffect(() => {\r\n        if(!DataTypes) return;\r\n\r\n        setSelectedDataType(DataTypes[0]?.title)\r\n    }, [DataTypes, setSelectedDataType]);\r\n\r\n    UseSortingAlgorithmQuery({setDataTypes, setAlgorithms, setDataLoaded});\r\n\r\n    return (\r\n        <SortingAlgorithmFunctionContext.Provider value={{setSelectedDataType, setSize, setListInfo, setAlgorithmStatisics}}>\r\n            <SortingAlgorithmDataContext.Provider value={{DataTypes, Algorithms, SelectedDataType, Size, ListInfo, AlgorithmStatisics, DataLoaded}}>\r\n                {children}\r\n            </SortingAlgorithmDataContext.Provider>\r\n        </SortingAlgorithmFunctionContext.Provider>\r\n    );\r\n}\r\n\r\nexport const UseSortingAlgorithmDataContext = () => React.useContext(SortingAlgorithmDataContext);\r\nexport const UseSortingAlgorithmFunctionContext = () => React.useContext(SortingAlgorithmFunctionContext);","import React from \"react\";\r\n\r\nimport \"./BigButton.scss\";\r\n\r\nfunction BigButton({className, onClick, children}) {\r\n    return (\r\n        <div className={`BigButton${className ? \" \" + className : \"\"}`} onClick={onClick}>\r\n            <button>\r\n                {children}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BigButton;\r\n","export default function AnimateModal(el, cb, className, animationName=className) {\r\n    if(el) {\r\n        el.classList.add(className);\r\n        el.onanimationend = (e) => {\r\n            e.animationName === animationName && cb();\r\n        };\r\n    }\r\n}","import React from \"react\";\r\nimport AnimateModal from \"../../Utils/AnimateModal\";\r\n\r\nimport \"./Spinner.scss\";\r\n\r\nfunction Spinner({Loading, CloseCallback}) {\r\n    const Overlay = React.useRef(null);\r\n\r\n    React.useEffect(() => {\r\n        if(!CloseCallback) return; \r\n\r\n        if(Loading === false)\r\n            AnimateModal(Overlay.current, () => CloseCallback(), \"OverlayFadeOut\")\r\n    }, [Overlay, Loading, CloseCallback]);\r\n\r\n    return (\r\n        <div ref={Overlay} className=\"Overlay SpinnerOverlay\">\r\n            <svg className=\"Spinner\" width={\"14rem\"} viewBox=\"0 0 50 50\" fill=\"none\">\r\n                <defs>\r\n                    <linearGradient id=\"SpinnerGradient\" gradientTransform=\"rotate(130)\">\r\n                        <stop offset=\"0%\"/>\r\n                        <stop offset=\"50%\"/>\r\n                    </linearGradient>\r\n                </defs>\r\n\r\n                <circle className=\"SpinnerStroke\" cx=\"25\" cy=\"25\" r=\"19.5\" strokeWidth={6 - 0.1}/>\r\n                <circle className=\"SpinnerPath\" cx=\"25\" cy=\"25\" r=\"19.5\" stroke={`url(#SpinnerGradient)`} strokeWidth={6}/>\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport { gql, useMutation } from '@apollo/client';\r\nimport { UseNotificationContext } from \"../../GlobalComponents/Notification/NotificationContext\";\r\nimport { UseSortingAlgorithmDataContext, UseSortingAlgorithmFunctionContext } from \"../../Context/SortingAlgorithmContext\";\r\n\r\nimport BigButton from \"../../GlobalComponents/BigButton\";\r\nimport Spinner from \"../../GlobalComponents/Spinner\";\r\n\r\nconst SORT_LIST = gql`\r\n    mutation SortList($dataType: String, $size: Int, $algorithm: String) {\r\n        SortList(dataType: $dataType, size: $size, algorithm: $algorithm) {\r\n            size dataType algorithm comparisons movements time\r\n        }\r\n    }\r\n`;\r\n\r\nfunction BigButtonPanel() {\r\n    const CurrentAlgorithm = React.useRef(null);\r\n    const [Loading, setLoading] = React.useState(false);\r\n    const [ShowSpinner, setShowSpinner] = React.useState(false);\r\n    const {Algorithms, Size, SelectedDataType} = UseSortingAlgorithmDataContext();\r\n    const {setAlgorithmStatisics} = UseSortingAlgorithmFunctionContext();\r\n    const PushNotification = UseNotificationContext();\r\n    const [SortList, {data, error}] = useMutation(SORT_LIST, {errorPolicy: \"all\", onError: () => 0});\r\n\r\n    const RunSort = (Algorithm) => {\r\n        setLoading(true);\r\n        setShowSpinner(true);\r\n        CurrentAlgorithm.current = Algorithm;\r\n\r\n        SortList({variables: {dataType: SelectedDataType, size: Size, algorithm: Algorithm.title}});\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if(!data?.SortList) return;\r\n\r\n        setAlgorithmStatisics({...data.SortList, \r\n            dataType: data.SortList.dataType !== null ? data.SortList.dataType.replace(\"-order\", \"\") : null,\r\n            algorithm: CurrentAlgorithm.current.displayName?.replace(\" Sort\", \"\"),\r\n        });\r\n\r\n        setTimeout(() => {\r\n            setLoading(false);\r\n            PushNotification({type: \"Success\", title: `${CurrentAlgorithm.current.displayName} Complete`, timeout: 4500});\r\n        }, 500);\r\n    }, [CurrentAlgorithm, data, setAlgorithmStatisics, setLoading, PushNotification]);\r\n\r\n    React.useEffect(() => {\r\n        if(!error) return;\r\n\r\n        let body = error.message?.split(\": \");\r\n        body && (body = body[body.length >= 2 ? 1 : 0]);\r\n        \r\n        setTimeout(() => {\r\n            setLoading(false);\r\n            PushNotification({\r\n                title: `${CurrentAlgorithm.current.displayName} Failed`, \r\n                body, timeout: 4500\r\n            });\r\n        }, 500);\r\n    }, [CurrentAlgorithm, error, setLoading, PushNotification]);\r\n\r\n    return (\r\n        <>\r\n            <div id=\"BigButtonPanel\">\r\n                {\r\n                    Algorithms.map((Algorithm, a) => (\r\n                        <BigButton key={a} onClick={() => RunSort(Algorithm)}>\r\n                            {Algorithm.displayName}\r\n                        </BigButton>\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n            {ShowSpinner && <Spinner Loading={Loading} CloseCallback={setShowSpinner}/>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BigButtonPanel;\r\n","import React from \"react\";\r\n\r\nimport \"./RadioButton.scss\"\r\n\r\nfunction RadioButton({size= \"1.25rem\", name, label, description, defaultChecked, onChange}) {\r\n    const TimeoutRef = React.useRef(null)\r\n    const [ShowToolTip, setShowToolTip] = React.useState(null);\r\n\r\n    const onMouseEnter = () => {\r\n        TimeoutRef.current = setTimeout(() => {setShowToolTip(true)}, 1000);\r\n    }\r\n\r\n    const onMouseOut = () => {\r\n        clearTimeout(TimeoutRef.current);\r\n        TimeoutRef.current = null;\r\n        setShowToolTip((OldShowValue) => OldShowValue ? false : null);\r\n    }\r\n\r\n    return (\r\n        <label className=\"RadioButton\">\r\n            <input type=\"radio\" name={name} defaultChecked={defaultChecked} onChange={onChange}/>\r\n            <span className=\"CheckMarkBorder\" style={{width: size, height: size}}>\r\n                <span className=\"CheckMark\">\r\n                    <span style={{width: `calc(0.52 * ${size}`, height: `calc(0.52 * ${size}`}}></span>\r\n                </span>\r\n            </span>\r\n            {label && <span className=\"RadioLabel\" onMouseOver={onMouseEnter} onMouseLeave={onMouseOut}>\r\n                {label}\r\n                {description && <div className=\"ToolTip\" style={{\r\n                    animation: ShowToolTip !== null ? ShowToolTip ? \r\n                    \"ToolTipScaleIn 0.3s ease-in-out forwards\" : \r\n                    \"ToolTipScaleOut 0.5s ease-in-out forwards\" : null\r\n                }}>{description}</div>}\r\n            </span>}\r\n        </label>\r\n    );\r\n}\r\n\r\nexport default RadioButton;\r\n","import React from \"react\";\r\nimport { UseSortingAlgorithmDataContext, UseSortingAlgorithmFunctionContext } from \"../../Context/SortingAlgorithmContext\";\r\n\r\nimport RadioButton from \"../../GlobalComponents/RadioButton\";\r\n\r\nfunction RadioButtons() {\r\n    const {setSelectedDataType} = UseSortingAlgorithmFunctionContext();\r\n    const {DataTypes, SelectedDataType} = UseSortingAlgorithmDataContext();\r\n\r\n    return (\r\n        <div className=\"RadioButtons\">\r\n            {\r\n                DataTypes.map((DataType, d) => (\r\n                    <RadioButton key={d} name=\"DataTypes\" label={DataType.displayName}\r\n                        description={DataType.description}\r\n                        defaultChecked={DataType.title === SelectedDataType}\r\n                        onChange={() => setSelectedDataType(DataType.title)}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RadioButtons;\r\n","import React from \"react\";\r\n\r\nimport \"./RangeSlider.scss\";\r\n\r\nfunction RangeSlider({min, max, step = 1, value, onChange, onMouseLeave}) {\r\n    const [ShowToolTip, setShowToolTip] = React.useState(null);\r\n\r\n    return (\r\n        <div className=\"RangeSlider\" onMouseLeave={onMouseLeave}>\r\n            <div className=\"Range\" style={{\r\n                width: `calc(${100*(value - min)/(max - min)}% - 1px)`,\r\n                border: value === min ? 0 : null,\r\n                borderRight: (value === max || value === min) ? 0 : null,\r\n            }}></div>\r\n\r\n            <input type=\"range\" className=\"Handle\" value={value} \r\n                min={min} max={max} step={step} onChange={onChange}\r\n                onMouseOver={() => setShowToolTip(true)}\r\n                onMouseLeave={() => setShowToolTip(false)}\r\n                style={{\r\n                    borderLeftColor: value === min ? \"transparent\" : null, \r\n                    borderRightColor: value === max ? \"transparent\" : null\r\n                }}\r\n            />\r\n\r\n            <div className=\"ToolTip\" style={{\r\n                left: `calc(${(value - min)/(max - min)} * (100% - 0.375 * 3.75rem) - 0.25 * 3.75rem)`,\r\n                animation: ShowToolTip !== null ? ShowToolTip ? \r\n                    \"ToolTipScaleIn 0.3s ease-in-out forwards\" : \r\n                    \"ToolTipScaleOut 0.5s ease-in-out forwards\" : null\r\n            }}>{value}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RangeSlider;\r\n","import React from \"react\";\r\nimport { UseSortingAlgorithmFunctionContext } from \"../../Context/SortingAlgorithmContext\";\r\n\r\nimport RangeSlider from \"../../GlobalComponents/RangeSlider\";\r\n\r\nfunction SizeSlider() {\r\n    const [Size, setSize] = React.useState(1000);\r\n    const {setSize: setContextSize} = UseSortingAlgorithmFunctionContext();\r\n\r\n    return (\r\n        <div id=\"SizeSlider\">\r\n            <span className=\"SliderLabel\">Size</span>\r\n            \r\n            <RangeSlider min={1000} max={50000} value={Size} \r\n                onChange={(e) => setSize(parseInt(e.target.value))}\r\n                onMouseLeave={() => setContextSize(Size)}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SizeSlider;\r\n","import React from \"react\";\r\nimport AnimateModal from \"../../Utils/AnimateModal\";\r\n\r\nimport \"./PrimaryModal.scss\";\r\n\r\nfunction PrimaryModal(props) {\r\n    const Overlay = React.useRef(null);\r\n    const Modal = React.useRef(null);\r\n\r\n    const CloseModal = (e) => {\r\n        if(!Overlay.current || !Modal.current) return;\r\n        e.persist();\r\n\r\n        const OverlayClose = () => {\r\n            AnimateModal(Overlay.current, () => props.CloseCallback(props.PassCloseEvent ? e : null), \"OverlayFadeOut\");\r\n        }\r\n\r\n        AnimateModal(Modal.current, OverlayClose, \"ModalFadeOut\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"Overlay\" ref={Overlay} \r\n                onClick={CloseModal}\r\n            ></div>\r\n            <div className=\"PrimaryModal\"  ref={Modal} style={props.style} {...props.ModalOptions}>\r\n                <h2 className=\"ModalHeader\">\r\n                    {props.HeaderTitle || \"Header\"}\r\n                    <span className=\"CloseButton\" onClick={CloseModal}>x</span>\r\n                </h2>\r\n\r\n                <div className=\"ModalContentContainer\">\r\n                    <div className=\"ModalContent\">\r\n                        {props.children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PrimaryModal;\r\n","import React from \"react\";\r\nimport { UseSortingAlgorithmDataContext } from \"../../Context/SortingAlgorithmContext\";\r\n\r\nimport PrimaryModal from \"../../GlobalComponents/PrimaryModal\";\r\n\r\nfunction ListModal({setShowListModal}) {\r\n    const {ListInfo} = UseSortingAlgorithmDataContext();\r\n\r\n    return (\r\n        <PrimaryModal CloseCallback={setShowListModal} HeaderTitle=\"View List\">\r\n            {ListInfo?.list && \r\n                <>\r\n                    <p className=\"ListTitle\">{ListInfo.dataType?.replace(/-?order/, \"Order\")} List</p>\r\n                    <p className=\"List\">{ListInfo.list}</p>\r\n                </>\r\n            }\r\n            {ListInfo?.sortedList && \r\n                <>\r\n                    <p className=\"ListTitle\">Sorted List</p>\r\n                    <p className=\"List\">{ListInfo.sortedList}</p>\r\n                </>\r\n            }\r\n        </PrimaryModal>\r\n    );\r\n}\r\n\r\nexport default ListModal;\r\n","import React from \"react\";\r\n\r\nimport BigButton from \"../BigButton\";\r\n\r\nimport \"./PrimaryButton.scss\";\r\n\r\nfunction PrimaryButton({onClick, children}) {\r\n    return (\r\n        <BigButton className=\"PrimaryButton\" onClick={onClick}>\r\n            {children}\r\n        </BigButton>\r\n    );\r\n}\r\n\r\nexport default PrimaryButton;\r\n","import React from \"react\";\r\nimport { gql, useMutation, useLazyQuery } from '@apollo/client';\r\nimport { UseSortingAlgorithmDataContext, UseSortingAlgorithmFunctionContext } from \"../../Context/SortingAlgorithmContext\";\r\nimport { UseNotificationContext } from \"../../GlobalComponents/Notification/NotificationContext\";\r\n\r\nimport PrimaryButton from \"../../GlobalComponents/PrimaryButton\";\r\nimport Spinner from \"../../GlobalComponents/Spinner\";\r\n\r\nconst UPDATE_LIST = gql`\r\n    mutation UpdateList($dataType: String, $size: Int) {\r\n        UpdateList(dataType: $dataType, size: $size) {\r\n            size dataType list sortedList\r\n        }\r\n    }\r\n`;\r\nconst GET_LIST = gql`\r\n    query GetList {GetList {size dataType list sortedList}}\r\n`;\r\n\r\nfunction ListButtons({setShowListModal}) {\r\n    const [CurrentListInfo, setCurrentListInfo] = React.useState(null);\r\n    const [Loading, setLoading] = React.useState(false);\r\n    const [ShowSpinner, setShowSpinner] = React.useState(false);\r\n    const PushNotification = UseNotificationContext();\r\n    const {SelectedDataType, Size} = UseSortingAlgorithmDataContext();\r\n    const {setListInfo} = UseSortingAlgorithmFunctionContext();\r\n\r\n    const RunUpdate = () => {\r\n        setShowSpinner(true)\r\n        setLoading(true);\r\n        UpdateList({variables: {dataType: SelectedDataType, size: Size}});\r\n    }\r\n\r\n    const RunGetList = () => {\r\n        setShowSpinner(true)\r\n        setLoading(true);\r\n        setCurrentListInfo({SelectedDataType, Size});\r\n        LoadListInfo();\r\n    }\r\n\r\n    const [UpdateList] = useMutation(UPDATE_LIST, {errorPolicy: \"all\",  \r\n        onCompleted: (UpdateListMutationData) => {\r\n            setListInfo(UpdateListMutationData.UpdateList);\r\n            setTimeout(() => {\r\n                setLoading(false);\r\n                \r\n                if(CurrentListInfo) {\r\n                    setShowListModal(true);\r\n                    setCurrentListInfo(null);\r\n                }\r\n                    \r\n                PushNotification({type: \"Success\", title: `List Updated`, timeout: 4500});\r\n            }, 500);\r\n        }, onError: () => {\r\n            setTimeout(() => {\r\n                setLoading(false);\r\n                PushNotification({title: \"Failed To Update List\", \r\n                    body: \"Please Try Again Another Time\", timeout: 4500});\r\n            }, 500);\r\n        }\r\n    });\r\n\r\n    const [LoadListInfo] = useLazyQuery(GET_LIST, {fetchPolicy: \"cache-and-network\", \r\n        onCompleted: (ListInfoQueryData) => {\r\n            if(\r\n                ListInfoQueryData.GetList?.size !== CurrentListInfo?.Size || \r\n                ListInfoQueryData.GetList?.dataType !== CurrentListInfo?.SelectedDataType\r\n            ) {\r\n                RunUpdate();\r\n            } else {\r\n                setCurrentListInfo(null);\r\n                setListInfo(ListInfoQueryData.GetList);\r\n\r\n                setTimeout(() => {\r\n                    setLoading(false);\r\n                    setShowListModal(true);\r\n                }, 500)\r\n            }\r\n        }, onError: () => {\r\n            setCurrentListInfo(null);\r\n\r\n            setTimeout(() => {\r\n                setLoading(false);\r\n                PushNotification({title: \"Failed To View List\", \r\n                    body: \"Please Try Again Another Time\", timeout: 4500});\r\n            }, 500);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n        <div id=\"ListButtons\">\r\n            <PrimaryButton onClick={() => RunGetList()}>View List</PrimaryButton>\r\n            <PrimaryButton onClick={() => RunUpdate()}>Update List</PrimaryButton>\r\n        </div>\r\n\r\n        {ShowSpinner && <Spinner Loading={Loading} CloseCallback={setShowSpinner}/>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ListButtons;\r\n","import React from \"react\";\r\n\r\nimport RadioButtons from \"./RadioButtons\";\r\nimport SizeSlider from \"./SizeSlider\";\r\nimport ListModal from \"./ListModal\";\r\nimport ListButtons from \"./ListButtons\";\r\n\r\nfunction ListProperties() {\r\n    const [ShowListModal, setShowListModal] = React.useState(false);\r\n\r\n    return (\r\n        <>\r\n        <div id=\"ListProperties\">\r\n            <h2>List Properties</h2>\r\n            <div style={{width: \"min-content\", margin: \"auto auto 20px\"}}>\r\n                <RadioButtons/>\r\n                <SizeSlider/>\r\n            </div>\r\n        </div>\r\n\r\n        <ListButtons setShowListModal={setShowListModal}/>\r\n\r\n        {ShowListModal &&\r\n            <ListModal setShowListModal={setShowListModal}/>\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ListProperties;\r\n","import React from \"react\";\r\n\r\nfunction Result({title, value = null}) {\r\n    return (\r\n        <>\r\n            <span className=\"ResultTitle\">{title}:</span>\r\n            <span className=\"ResultValue\">{value !== null ? value : \"N/A\"}</span>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\nimport { UseSortingAlgorithmDataContext } from \"../../Context/SortingAlgorithmContext\";\r\n\r\nimport Result from \"./Result\";\r\n\r\nconst Titles = [\r\n    {title: \"size\", name: \"N\"},\r\n    {title: \"dataType\", name: \"DataType\"},\r\n    {title: \"algorithm\", name: \"Sort\"},\r\n    {title: \"comparisons\", name: \"Comparisons\"},\r\n    {title: \"movements\", name: \"Movements\"},\r\n    {title: \"time\", name: \"Time\"}\r\n];\r\n\r\nfunction ExperimentalResults() {\r\n    const {AlgorithmStatisics} = UseSortingAlgorithmDataContext();\r\n    \r\n    return (\r\n        <div id=\"ExperimentalResults\">\r\n            <h2>Experimental Results</h2>\r\n\r\n            <div id=\"Results\">\r\n                {Titles.map((Title, t) => (\r\n                    <Result key={t} title={Title.name} value={AlgorithmStatisics[Title.title]}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExperimentalResults;\r\n","import React from \"react\";\r\n\r\nfunction Ranking({algorithm, size, selectedStat, selectedStatValue, winner, rank}) {\r\n    const TimeoutRef = React.useRef(null)\r\n    const [ShowToolTip, setShowToolTip] = React.useState(null);\r\n\r\n    const onMouseEnter = () => {\r\n        TimeoutRef.current = setTimeout(() => {setShowToolTip(true)}, 1000);\r\n    }\r\n\r\n    const onMouseOut = () => {\r\n        clearTimeout(TimeoutRef.current);\r\n        TimeoutRef.current = null;\r\n        setShowToolTip((OldShowValue) => OldShowValue ? false : null);\r\n    }\r\n\r\n    return (\r\n        <div className=\"Rank\" style={size < 0 ? {opacity: 0.5} : null}>\r\n            <span className={`RankNumber ${winner ? \"RankWinner\" : \"\"}`}><div></div><span>{rank}</span></span> \r\n            <span className=\"RankName\" \r\n                onMouseOver={selectedStatValue !== null ? onMouseEnter : null}\r\n                onMouseLeave={selectedStatValue !== null ? onMouseOut : null}\r\n            >\r\n                {algorithm.replace(\"-\", \" \")}\r\n                {size > 0 && <div className=\"ToolTip\" style={{\r\n                    animation: ShowToolTip !== null ? ShowToolTip ? \r\n                    \"ToolTipScaleIn 0.3s ease-in-out forwards\" : \r\n                    \"ToolTipScaleOut 0.5s ease-in-out forwards\" : null\r\n                }}>\r\n                    Size = {size} <br/>\r\n                    {selectedStat} = {selectedStatValue}\r\n                </div>}\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Ranking;\r\n","import React from \"react\";\r\nimport { gql, useLazyQuery, useMutation} from '@apollo/client';\r\nimport { UseSortingAlgorithmDataContext } from \"../../Context/SortingAlgorithmContext\";\r\nimport { UseNotificationContext } from \"../../GlobalComponents/Notification/NotificationContext\";\r\n\r\nimport PrimaryModal from \"../../GlobalComponents/PrimaryModal\";\r\nimport PrimaryButton from \"../../GlobalComponents/PrimaryButton\";\r\nimport Ranking from \"./Ranking\";\r\nimport Spinner from \"../../GlobalComponents/Spinner\";\r\n\r\nconst Stats = [\"Comparisons\", \"Movements\", \"Time\"];\r\n\r\nconst GET_LEADER_BOARD_STATS = gql`\r\n    query GetLeaderBoardStats {\r\n        GetLeaderBoardStats {\r\n            dataType\r\n            comparisons {algorithm comparisons size}\r\n            movements {algorithm movements size}\r\n            time {algorithm time size}\r\n        }\r\n    }\r\n`;\r\nconst RESET_LEADER_BOARD = gql`\r\n    mutation ResetLeaderBoard {\r\n        ResetLeaderBoard\r\n    }\r\n`;\r\n\r\nfunction LeaderBoard({setShowLeaderBoard}) {\r\n    const [Loading, setLoading] = React.useState(true);\r\n    const [ShowSpinner, setShowSpinner] = React.useState(true);\r\n    const [Rankings, setRankings] = React.useState(null);\r\n    const [DataType, setDataType] = React.useState(null);\r\n    const [SelectedStat, setSelectedStat] = React.useState(Stats[0].toLowerCase());\r\n    const {DataTypes} = UseSortingAlgorithmDataContext();\r\n    const PushNotification =  UseNotificationContext();\r\n\r\n    const [LoadLeaderBoardStats] = useLazyQuery(GET_LEADER_BOARD_STATS, {fetchPolicy: \"cache-and-network\", \r\n        onCompleted: (LeaderBoardStatQueryData) => {\r\n            setRankings(LeaderBoardStatQueryData.GetLeaderBoardStats.reduce((a, c) => \r\n                ({...a, [c.dataType]: c}), {})\r\n            );\r\n            setDataType(LeaderBoardStatQueryData.GetLeaderBoardStats[0]?.dataType);\r\n\r\n            setTimeout(() => {\r\n                setLoading(false);\r\n            }, 500);\r\n        }, onError: () => {\r\n            setTimeout(() => {\r\n                setLoading(false);\r\n                setShowLeaderBoard(false);\r\n                PushNotification({title: \"Failed To View Leader Board\", \r\n                    body: \"Please Try Again Another Time\", timeout: 4500});\r\n            }, 500);\r\n        }\r\n    });\r\n\r\n    const [ResetLeaderBoard] = useMutation(RESET_LEADER_BOARD, {errorPolicy: \"all\",  \r\n        onCompleted: () => PushNotification(\r\n            {type: \"Success\", title: `Leader Board Is Reset`, timeout: 4500}\r\n        ), onError: () => PushNotification(\r\n            {title: \"Failed To Reset Leader Board\", body: \"Please Try Again Another Time\", timeout: 4500}\r\n        )\r\n    });\r\n\r\n    const CloseLeaderBoard = (e) => {\r\n        e.ctrlKey && ResetLeaderBoard();\r\n        setShowLeaderBoard();\r\n    }\r\n\r\n    React.useEffect(() => LoadLeaderBoardStats(), [LoadLeaderBoardStats]);\r\n\r\n    return (\r\n        <>\r\n            {!ShowSpinner ?\r\n                <PrimaryModal CloseCallback={CloseLeaderBoard} HeaderTitle=\"Leader Board\" PassCloseEvent={true}>\r\n                    <div className=\"LeaderBoardButtons DataTypes\">\r\n                        {DataTypes && DataTypes.map((Data, d) => (\r\n                            <label  key={d} className=\"RadioButton\">\r\n                                <input type=\"radio\" name=\"DataType\" defaultChecked={d === 0} onChange={() => setDataType(Data.title)}/>\r\n                                <PrimaryButton>{Data.title?.replace(/-order/, \"\")}</PrimaryButton>\r\n                            </label>\r\n                        ))}\r\n                    </div>\r\n\r\n                    <div className=\"LeaderBoardButtons Statistics\">\r\n                        {Stats.map((Stat, s) => (\r\n                            <label key={s} className=\"RadioButton\">\r\n                                <input type=\"radio\" name=\"Statistic\" defaultChecked={s === 0} onChange={() => setSelectedStat(Stat.toLowerCase())}/>\r\n                                <PrimaryButton>{Stat}</PrimaryButton>\r\n                            </label>\r\n                        ))}\r\n                    </div>\r\n\r\n                    <div id=\"Rankings\">\r\n                        {Rankings && Rankings[DataType] &&\r\n                            Rankings[DataType][SelectedStat]?.map((Rank, r) => (\r\n                                <Ranking \r\n                                    key={`${r}-${DataType}-${SelectedStat}`} \r\n                                    algorithm={Rank.algorithm} size={Rank.size} \r\n                                    selectedStat={SelectedStat} selectedStatValue={Rank[SelectedStat]}\r\n                                    winner={r === 0 && Rank.size > 0} rank={r + 1}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </div>       \r\n                </PrimaryModal>\r\n                :\r\n                <Spinner Loading={Loading} CloseCallback={setShowSpinner}/>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LeaderBoard;\r\n\r\n\r\n","import React from \"react\";\r\nimport { UseNotificationContext } from \"../../GlobalComponents/Notification/NotificationContext\";\r\nimport { UseSortingAlgorithmDataContext } from \"../../Context/SortingAlgorithmContext\";\r\n\r\nimport BigButtonPanel from \"../BigButtonPanel\";\r\nimport ListProperties from \"../ListProperties\";\r\nimport ExperimentalResults from \"../ExperimentalResults\";\r\nimport PrimaryButton from \"../../GlobalComponents/PrimaryButton\";\r\nimport LeaderBoard from \"./LeaderBoard\";\r\nimport Spinner from \"../../GlobalComponents/Spinner\";\r\n\r\nfunction MainPanel() {\r\n    const [ShowLeaderBoard, setShowLeaderBoard] = React.useState(false);\r\n    const [ShowSpinner, setShowSpinner] = React.useState(true);\r\n    const {DataLoaded} = UseSortingAlgorithmDataContext();\r\n    const PushNotification = UseNotificationContext();\r\n\r\n    React.useEffect(() => {\r\n        if(DataLoaded === false)\r\n            PushNotification({title: \"Server Is Not Responding\", body: \"Please Try Again Another Time\"});\r\n    }, [DataLoaded, PushNotification])\r\n\r\n    return (\r\n        <>\r\n        {!ShowSpinner ?\r\n            <div id=\"MainPanel\">\r\n                <BigButtonPanel/>\r\n\r\n                <div id=\"MainContent\">\r\n                    <ListProperties/>\r\n                    <ExperimentalResults/>\r\n                    <PrimaryButton onClick={() => setShowLeaderBoard(true)}>View Leader Board</PrimaryButton>\r\n                    {ShowLeaderBoard &&\r\n                        <LeaderBoard setShowLeaderBoard={setShowLeaderBoard}/>\r\n                    }\r\n                </div> \r\n            </div>\r\n            :\r\n            <Spinner Loading={DataLoaded !== true} CloseCallback={setShowSpinner}/>\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainPanel;\r\n","import React from \"react\";\nimport { NotificationProvider } from \"./GlobalComponents/Notification/NotificationContext\";\nimport { SortingAlgorithmProvider } from \"./Context/SortingAlgorithmContext\";\n\nimport MainPanel from \"./Components/MainPanel\";\n\nimport \"./App.scss\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <NotificationProvider>\n                <SortingAlgorithmProvider>\n                    <MainPanel/>\n                </SortingAlgorithmProvider>\n            </NotificationProvider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {ApolloClient, InMemoryCache, ApolloProvider} from \"@apollo/client\";\n\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./index.css\";\n\nconst URI = window.location.protocol.indexOf('https') === 0 ? \"http://algorithms-project-one-api.herokuapp.com/graphql\" : \"http://localhost:8080/graphql\";\n\nconst Client = new ApolloClient({uri: URI, cache: new InMemoryCache()});\n\nReactDOM.render(\n    <React.StrictMode>\n        <ApolloProvider client={Client}>\n            <App/>\n        </ApolloProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}